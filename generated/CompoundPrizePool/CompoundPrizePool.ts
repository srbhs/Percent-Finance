// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AwardCaptured extends ethereum.Event {
  get params(): AwardCaptured__Params {
    return new AwardCaptured__Params(this);
  }
}

export class AwardCaptured__Params {
  _event: AwardCaptured;

  constructor(event: AwardCaptured) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Awarded extends ethereum.Event {
  get params(): Awarded__Params {
    return new Awarded__Params(this);
  }
}

export class Awarded__Params {
  _event: Awarded;

  constructor(event: Awarded) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AwardedExternalERC20 extends ethereum.Event {
  get params(): AwardedExternalERC20__Params {
    return new AwardedExternalERC20__Params(this);
  }
}

export class AwardedExternalERC20__Params {
  _event: AwardedExternalERC20;

  constructor(event: AwardedExternalERC20) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AwardedExternalERC721 extends ethereum.Event {
  get params(): AwardedExternalERC721__Params {
    return new AwardedExternalERC721__Params(this);
  }
}

export class AwardedExternalERC721__Params {
  _event: AwardedExternalERC721;

  constructor(event: AwardedExternalERC721) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class CompoundPrizePoolInitialized extends ethereum.Event {
  get params(): CompoundPrizePoolInitialized__Params {
    return new CompoundPrizePoolInitialized__Params(this);
  }
}

export class CompoundPrizePoolInitialized__Params {
  _event: CompoundPrizePoolInitialized;

  constructor(event: CompoundPrizePoolInitialized) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ControlledTokenAdded extends ethereum.Event {
  get params(): ControlledTokenAdded__Params {
    return new ControlledTokenAdded__Params(this);
  }
}

export class ControlledTokenAdded__Params {
  _event: ControlledTokenAdded;

  constructor(event: ControlledTokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreditBurned extends ethereum.Event {
  get params(): CreditBurned__Params {
    return new CreditBurned__Params(this);
  }
}

export class CreditBurned__Params {
  _event: CreditBurned;

  constructor(event: CreditBurned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreditMinted extends ethereum.Event {
  get params(): CreditMinted__Params {
    return new CreditMinted__Params(this);
  }
}

export class CreditMinted__Params {
  _event: CreditMinted;

  constructor(event: CreditMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreditPlanSet extends ethereum.Event {
  get params(): CreditPlanSet__Params {
    return new CreditPlanSet__Params(this);
  }
}

export class CreditPlanSet__Params {
  _event: CreditPlanSet;

  constructor(event: CreditPlanSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creditLimitMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creditRateMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get trustedForwarder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reserveRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maxExitFeeMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxTimelockDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InstantWithdrawal extends ethereum.Event {
  get params(): InstantWithdrawal__Params {
    return new InstantWithdrawal__Params(this);
  }
}

export class InstantWithdrawal__Params {
  _event: InstantWithdrawal;

  constructor(event: InstantWithdrawal) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get redeemed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get exitFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidityCapSet extends ethereum.Event {
  get params(): LiquidityCapSet__Params {
    return new LiquidityCapSet__Params(this);
  }
}

export class LiquidityCapSet__Params {
  _event: LiquidityCapSet;

  constructor(event: LiquidityCapSet) {
    this._event = event;
  }

  get liquidityCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizeStrategySet extends ethereum.Event {
  get params(): PrizeStrategySet__Params {
    return new PrizeStrategySet__Params(this);
  }
}

export class PrizeStrategySet__Params {
  _event: PrizeStrategySet;

  constructor(event: PrizeStrategySet) {
    this._event = event;
  }

  get prizeStrategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReserveFeeCaptured extends ethereum.Event {
  get params(): ReserveFeeCaptured__Params {
    return new ReserveFeeCaptured__Params(this);
  }
}

export class ReserveFeeCaptured__Params {
  _event: ReserveFeeCaptured;

  constructor(event: ReserveFeeCaptured) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReserveWithdrawal extends ethereum.Event {
  get params(): ReserveWithdrawal__Params {
    return new ReserveWithdrawal__Params(this);
  }
}

export class ReserveWithdrawal__Params {
  _event: ReserveWithdrawal;

  constructor(event: ReserveWithdrawal) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TimelockDeposited extends ethereum.Event {
  get params(): TimelockDeposited__Params {
    return new TimelockDeposited__Params(this);
  }
}

export class TimelockDeposited__Params {
  _event: TimelockDeposited;

  constructor(event: TimelockDeposited) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TimelockedWithdrawal extends ethereum.Event {
  get params(): TimelockedWithdrawal__Params {
    return new TimelockedWithdrawal__Params(this);
  }
}

export class TimelockedWithdrawal__Params {
  _event: TimelockedWithdrawal;

  constructor(event: TimelockedWithdrawal) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TimelockedWithdrawalSwept extends ethereum.Event {
  get params(): TimelockedWithdrawalSwept__Params {
    return new TimelockedWithdrawalSwept__Params(this);
  }
}

export class TimelockedWithdrawalSwept__Params {
  _event: TimelockedWithdrawalSwept;

  constructor(event: TimelockedWithdrawalSwept) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get redeemed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferredExternalERC20 extends ethereum.Event {
  get params(): TransferredExternalERC20__Params {
    return new TransferredExternalERC20__Params(this);
  }
}

export class TransferredExternalERC20__Params {
  _event: TransferredExternalERC20;

  constructor(event: TransferredExternalERC20) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CompoundPrizePool__calculateEarlyExitFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CompoundPrizePool__calculateTimelockDurationResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CompoundPrizePool__creditPlanOfResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CompoundPrizePool extends ethereum.SmartContract {
  static bind(address: Address): CompoundPrizePool {
    return new CompoundPrizePool("CompoundPrizePool", address);
  }

  accountedBalance(): BigInt {
    let result = super.call(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  awardBalance(): BigInt {
    let result = super.call("awardBalance", "awardBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_awardBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("awardBalance", "awardBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfCredit(user: Address, controlledToken: Address): BigInt {
    let result = super.call(
      "balanceOfCredit",
      "balanceOfCredit(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(controlledToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfCredit(
    user: Address,
    controlledToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfCredit",
      "balanceOfCredit(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(controlledToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cToken(): Address {
    let result = super.call("cToken", "cToken():(address)", []);

    return result[0].toAddress();
  }

  try_cToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("cToken", "cToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateEarlyExitFee(
    from: Address,
    controlledToken: Address,
    amount: BigInt
  ): CompoundPrizePool__calculateEarlyExitFeeResult {
    let result = super.call(
      "calculateEarlyExitFee",
      "calculateEarlyExitFee(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new CompoundPrizePool__calculateEarlyExitFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateEarlyExitFee(
    from: Address,
    controlledToken: Address,
    amount: BigInt
  ): ethereum.CallResult<CompoundPrizePool__calculateEarlyExitFeeResult> {
    let result = super.tryCall(
      "calculateEarlyExitFee",
      "calculateEarlyExitFee(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CompoundPrizePool__calculateEarlyExitFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calculateReserveFee(amount: BigInt): BigInt {
    let result = super.call(
      "calculateReserveFee",
      "calculateReserveFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateReserveFee(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateReserveFee",
      "calculateReserveFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateTimelockDuration(
    from: Address,
    controlledToken: Address,
    amount: BigInt
  ): CompoundPrizePool__calculateTimelockDurationResult {
    let result = super.call(
      "calculateTimelockDuration",
      "calculateTimelockDuration(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new CompoundPrizePool__calculateTimelockDurationResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateTimelockDuration(
    from: Address,
    controlledToken: Address,
    amount: BigInt
  ): ethereum.CallResult<CompoundPrizePool__calculateTimelockDurationResult> {
    let result = super.tryCall(
      "calculateTimelockDuration",
      "calculateTimelockDuration(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CompoundPrizePool__calculateTimelockDurationResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  canAwardExternal(_externalToken: Address): boolean {
    let result = super.call(
      "canAwardExternal",
      "canAwardExternal(address):(bool)",
      [ethereum.Value.fromAddress(_externalToken)]
    );

    return result[0].toBoolean();
  }

  try_canAwardExternal(_externalToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canAwardExternal",
      "canAwardExternal(address):(bool)",
      [ethereum.Value.fromAddress(_externalToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  captureAwardBalance(): BigInt {
    let result = super.call(
      "captureAwardBalance",
      "captureAwardBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_captureAwardBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "captureAwardBalance",
      "captureAwardBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditPlanOf(
    controlledToken: Address
  ): CompoundPrizePool__creditPlanOfResult {
    let result = super.call(
      "creditPlanOf",
      "creditPlanOf(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(controlledToken)]
    );

    return new CompoundPrizePool__creditPlanOfResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_creditPlanOf(
    controlledToken: Address
  ): ethereum.CallResult<CompoundPrizePool__creditPlanOfResult> {
    let result = super.tryCall(
      "creditPlanOf",
      "creditPlanOf(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(controlledToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CompoundPrizePool__creditPlanOfResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  estimateCreditAccrualTime(
    _controlledToken: Address,
    _principal: BigInt,
    _interest: BigInt
  ): BigInt {
    let result = super.call(
      "estimateCreditAccrualTime",
      "estimateCreditAccrualTime(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_controlledToken),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_interest)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimateCreditAccrualTime(
    _controlledToken: Address,
    _principal: BigInt,
    _interest: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateCreditAccrualTime",
      "estimateCreditAccrualTime(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_controlledToken),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_interest)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityCap(): BigInt {
    let result = super.call("liquidityCap", "liquidityCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidityCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidityCap", "liquidityCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxExitFeeMantissa(): BigInt {
    let result = super.call(
      "maxExitFeeMantissa",
      "maxExitFeeMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxExitFeeMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxExitFeeMantissa",
      "maxExitFeeMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTimelockDuration(): BigInt {
    let result = super.call(
      "maxTimelockDuration",
      "maxTimelockDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTimelockDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTimelockDuration",
      "maxTimelockDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeStrategy(): Address {
    let result = super.call("prizeStrategy", "prizeStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_prizeStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizeStrategy",
      "prizeStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveRegistry(): Address {
    let result = super.call(
      "reserveRegistry",
      "reserveRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_reserveRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveRegistry",
      "reserveRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveTotalSupply(): BigInt {
    let result = super.call(
      "reserveTotalSupply",
      "reserveTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveTotalSupply",
      "reserveTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sweepTimelockBalances(users: Array<Address>): BigInt {
    let result = super.call(
      "sweepTimelockBalances",
      "sweepTimelockBalances(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(users)]
    );

    return result[0].toBigInt();
  }

  try_sweepTimelockBalances(
    users: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sweepTimelockBalances",
      "sweepTimelockBalances(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(users)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockBalanceAvailableAt(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceAvailableAt(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockBalanceOf(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockTotalSupply(): BigInt {
    let result = super.call(
      "timelockTotalSupply",
      "timelockTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timelockTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockTotalSupply",
      "timelockTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(): Array<Address> {
    let result = super.call("tokens", "tokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_tokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("tokens", "tokens():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdrawInstantlyFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    maximumExitFee: BigInt
  ): BigInt {
    let result = super.call(
      "withdrawInstantlyFrom",
      "withdrawInstantlyFrom(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(maximumExitFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawInstantlyFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    maximumExitFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawInstantlyFrom",
      "withdrawInstantlyFrom(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(maximumExitFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawReserve(to: Address): BigInt {
    let result = super.call(
      "withdrawReserve",
      "withdrawReserve(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );

    return result[0].toBigInt();
  }

  try_withdrawReserve(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawReserve",
      "withdrawReserve(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawWithTimelockFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address
  ): BigInt {
    let result = super.call(
      "withdrawWithTimelockFrom",
      "withdrawWithTimelockFrom(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawWithTimelockFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawWithTimelockFrom",
      "withdrawWithTimelockFrom(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddControlledTokenCall extends ethereum.Call {
  get inputs(): AddControlledTokenCall__Inputs {
    return new AddControlledTokenCall__Inputs(this);
  }

  get outputs(): AddControlledTokenCall__Outputs {
    return new AddControlledTokenCall__Outputs(this);
  }
}

export class AddControlledTokenCall__Inputs {
  _call: AddControlledTokenCall;

  constructor(call: AddControlledTokenCall) {
    this._call = call;
  }

  get _controlledToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControlledTokenCall__Outputs {
  _call: AddControlledTokenCall;

  constructor(call: AddControlledTokenCall) {
    this._call = call;
  }
}

export class AwardCall extends ethereum.Call {
  get inputs(): AwardCall__Inputs {
    return new AwardCall__Inputs(this);
  }

  get outputs(): AwardCall__Outputs {
    return new AwardCall__Outputs(this);
  }
}

export class AwardCall__Inputs {
  _call: AwardCall;

  constructor(call: AwardCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AwardCall__Outputs {
  _call: AwardCall;

  constructor(call: AwardCall) {
    this._call = call;
  }
}

export class AwardExternalERC20Call extends ethereum.Call {
  get inputs(): AwardExternalERC20Call__Inputs {
    return new AwardExternalERC20Call__Inputs(this);
  }

  get outputs(): AwardExternalERC20Call__Outputs {
    return new AwardExternalERC20Call__Outputs(this);
  }
}

export class AwardExternalERC20Call__Inputs {
  _call: AwardExternalERC20Call;

  constructor(call: AwardExternalERC20Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get externalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AwardExternalERC20Call__Outputs {
  _call: AwardExternalERC20Call;

  constructor(call: AwardExternalERC20Call) {
    this._call = call;
  }
}

export class AwardExternalERC721Call extends ethereum.Call {
  get inputs(): AwardExternalERC721Call__Inputs {
    return new AwardExternalERC721Call__Inputs(this);
  }

  get outputs(): AwardExternalERC721Call__Outputs {
    return new AwardExternalERC721Call__Outputs(this);
  }
}

export class AwardExternalERC721Call__Inputs {
  _call: AwardExternalERC721Call;

  constructor(call: AwardExternalERC721Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get externalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AwardExternalERC721Call__Outputs {
  _call: AwardExternalERC721Call;

  constructor(call: AwardExternalERC721Call) {
    this._call = call;
  }
}

export class BalanceCall extends ethereum.Call {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BalanceOfCreditCall extends ethereum.Call {
  get inputs(): BalanceOfCreditCall__Inputs {
    return new BalanceOfCreditCall__Inputs(this);
  }

  get outputs(): BalanceOfCreditCall__Outputs {
    return new BalanceOfCreditCall__Outputs(this);
  }
}

export class BalanceOfCreditCall__Inputs {
  _call: BalanceOfCreditCall;

  constructor(call: BalanceOfCreditCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get controlledToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BalanceOfCreditCall__Outputs {
  _call: BalanceOfCreditCall;

  constructor(call: BalanceOfCreditCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BeforeTokenTransferCall extends ethereum.Call {
  get inputs(): BeforeTokenTransferCall__Inputs {
    return new BeforeTokenTransferCall__Inputs(this);
  }

  get outputs(): BeforeTokenTransferCall__Outputs {
    return new BeforeTokenTransferCall__Outputs(this);
  }
}

export class BeforeTokenTransferCall__Inputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BeforeTokenTransferCall__Outputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }
}

export class CalculateEarlyExitFeeCall extends ethereum.Call {
  get inputs(): CalculateEarlyExitFeeCall__Inputs {
    return new CalculateEarlyExitFeeCall__Inputs(this);
  }

  get outputs(): CalculateEarlyExitFeeCall__Outputs {
    return new CalculateEarlyExitFeeCall__Outputs(this);
  }
}

export class CalculateEarlyExitFeeCall__Inputs {
  _call: CalculateEarlyExitFeeCall;

  constructor(call: CalculateEarlyExitFeeCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get controlledToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CalculateEarlyExitFeeCall__Outputs {
  _call: CalculateEarlyExitFeeCall;

  constructor(call: CalculateEarlyExitFeeCall) {
    this._call = call;
  }

  get exitFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get burnedCredit(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CalculateTimelockDurationCall extends ethereum.Call {
  get inputs(): CalculateTimelockDurationCall__Inputs {
    return new CalculateTimelockDurationCall__Inputs(this);
  }

  get outputs(): CalculateTimelockDurationCall__Outputs {
    return new CalculateTimelockDurationCall__Outputs(this);
  }
}

export class CalculateTimelockDurationCall__Inputs {
  _call: CalculateTimelockDurationCall;

  constructor(call: CalculateTimelockDurationCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get controlledToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CalculateTimelockDurationCall__Outputs {
  _call: CalculateTimelockDurationCall;

  constructor(call: CalculateTimelockDurationCall) {
    this._call = call;
  }

  get durationSeconds(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get burnedCredit(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CaptureAwardBalanceCall extends ethereum.Call {
  get inputs(): CaptureAwardBalanceCall__Inputs {
    return new CaptureAwardBalanceCall__Inputs(this);
  }

  get outputs(): CaptureAwardBalanceCall__Outputs {
    return new CaptureAwardBalanceCall__Outputs(this);
  }
}

export class CaptureAwardBalanceCall__Inputs {
  _call: CaptureAwardBalanceCall;

  constructor(call: CaptureAwardBalanceCall) {
    this._call = call;
  }
}

export class CaptureAwardBalanceCall__Outputs {
  _call: CaptureAwardBalanceCall;

  constructor(call: CaptureAwardBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositToCall extends ethereum.Call {
  get inputs(): DepositToCall__Inputs {
    return new DepositToCall__Inputs(this);
  }

  get outputs(): DepositToCall__Outputs {
    return new DepositToCall__Outputs(this);
  }
}

export class DepositToCall__Inputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositToCall__Outputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reserveRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _controlledTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _maxExitFeeMantissa(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxTimelockDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reserveRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _controlledTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _maxExitFeeMantissa(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxTimelockDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _cToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCreditPlanOfCall extends ethereum.Call {
  get inputs(): SetCreditPlanOfCall__Inputs {
    return new SetCreditPlanOfCall__Inputs(this);
  }

  get outputs(): SetCreditPlanOfCall__Outputs {
    return new SetCreditPlanOfCall__Outputs(this);
  }
}

export class SetCreditPlanOfCall__Inputs {
  _call: SetCreditPlanOfCall;

  constructor(call: SetCreditPlanOfCall) {
    this._call = call;
  }

  get _controlledToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creditRateMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _creditLimitMantissa(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetCreditPlanOfCall__Outputs {
  _call: SetCreditPlanOfCall;

  constructor(call: SetCreditPlanOfCall) {
    this._call = call;
  }
}

export class SetLiquidityCapCall extends ethereum.Call {
  get inputs(): SetLiquidityCapCall__Inputs {
    return new SetLiquidityCapCall__Inputs(this);
  }

  get outputs(): SetLiquidityCapCall__Outputs {
    return new SetLiquidityCapCall__Outputs(this);
  }
}

export class SetLiquidityCapCall__Inputs {
  _call: SetLiquidityCapCall;

  constructor(call: SetLiquidityCapCall) {
    this._call = call;
  }

  get _liquidityCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidityCapCall__Outputs {
  _call: SetLiquidityCapCall;

  constructor(call: SetLiquidityCapCall) {
    this._call = call;
  }
}

export class SetPrizeStrategyCall extends ethereum.Call {
  get inputs(): SetPrizeStrategyCall__Inputs {
    return new SetPrizeStrategyCall__Inputs(this);
  }

  get outputs(): SetPrizeStrategyCall__Outputs {
    return new SetPrizeStrategyCall__Outputs(this);
  }
}

export class SetPrizeStrategyCall__Inputs {
  _call: SetPrizeStrategyCall;

  constructor(call: SetPrizeStrategyCall) {
    this._call = call;
  }

  get _prizeStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPrizeStrategyCall__Outputs {
  _call: SetPrizeStrategyCall;

  constructor(call: SetPrizeStrategyCall) {
    this._call = call;
  }
}

export class SweepTimelockBalancesCall extends ethereum.Call {
  get inputs(): SweepTimelockBalancesCall__Inputs {
    return new SweepTimelockBalancesCall__Inputs(this);
  }

  get outputs(): SweepTimelockBalancesCall__Outputs {
    return new SweepTimelockBalancesCall__Outputs(this);
  }
}

export class SweepTimelockBalancesCall__Inputs {
  _call: SweepTimelockBalancesCall;

  constructor(call: SweepTimelockBalancesCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SweepTimelockBalancesCall__Outputs {
  _call: SweepTimelockBalancesCall;

  constructor(call: SweepTimelockBalancesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TimelockDepositToCall extends ethereum.Call {
  get inputs(): TimelockDepositToCall__Inputs {
    return new TimelockDepositToCall__Inputs(this);
  }

  get outputs(): TimelockDepositToCall__Outputs {
    return new TimelockDepositToCall__Outputs(this);
  }
}

export class TimelockDepositToCall__Inputs {
  _call: TimelockDepositToCall;

  constructor(call: TimelockDepositToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TimelockDepositToCall__Outputs {
  _call: TimelockDepositToCall;

  constructor(call: TimelockDepositToCall) {
    this._call = call;
  }
}

export class TransferExternalERC20Call extends ethereum.Call {
  get inputs(): TransferExternalERC20Call__Inputs {
    return new TransferExternalERC20Call__Inputs(this);
  }

  get outputs(): TransferExternalERC20Call__Outputs {
    return new TransferExternalERC20Call__Outputs(this);
  }
}

export class TransferExternalERC20Call__Inputs {
  _call: TransferExternalERC20Call;

  constructor(call: TransferExternalERC20Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get externalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferExternalERC20Call__Outputs {
  _call: TransferExternalERC20Call;

  constructor(call: TransferExternalERC20Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawInstantlyFromCall extends ethereum.Call {
  get inputs(): WithdrawInstantlyFromCall__Inputs {
    return new WithdrawInstantlyFromCall__Inputs(this);
  }

  get outputs(): WithdrawInstantlyFromCall__Outputs {
    return new WithdrawInstantlyFromCall__Outputs(this);
  }
}

export class WithdrawInstantlyFromCall__Inputs {
  _call: WithdrawInstantlyFromCall;

  constructor(call: WithdrawInstantlyFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maximumExitFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawInstantlyFromCall__Outputs {
  _call: WithdrawInstantlyFromCall;

  constructor(call: WithdrawInstantlyFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawReserveCall extends ethereum.Call {
  get inputs(): WithdrawReserveCall__Inputs {
    return new WithdrawReserveCall__Inputs(this);
  }

  get outputs(): WithdrawReserveCall__Outputs {
    return new WithdrawReserveCall__Outputs(this);
  }
}

export class WithdrawReserveCall__Inputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawReserveCall__Outputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawWithTimelockFromCall extends ethereum.Call {
  get inputs(): WithdrawWithTimelockFromCall__Inputs {
    return new WithdrawWithTimelockFromCall__Inputs(this);
  }

  get outputs(): WithdrawWithTimelockFromCall__Outputs {
    return new WithdrawWithTimelockFromCall__Outputs(this);
  }
}

export class WithdrawWithTimelockFromCall__Inputs {
  _call: WithdrawWithTimelockFromCall;

  constructor(call: WithdrawWithTimelockFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawWithTimelockFromCall__Outputs {
  _call: WithdrawWithTimelockFromCall;

  constructor(call: WithdrawWithTimelockFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
